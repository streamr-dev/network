syntax = "proto3";

option optimize_for = CODE_SIZE;

import "google/protobuf/empty.proto";
import "packages/dht/protos/DhtRpc.proto";

service ContentDeliveryRpc {
  rpc sendStreamMessage (StreamMessage) returns (google.protobuf.Empty);
  rpc leaveStreamPartNotice (LeaveStreamPartNotice) returns (google.protobuf.Empty);
}

service ProxyConnectionRpc {
  rpc requestConnection (ProxyConnectionRequest) returns (ProxyConnectionResponse);
}

service HandshakeRpc {
  rpc handshake (StreamPartHandshakeRequest) returns (StreamPartHandshakeResponse);
  rpc interleaveRequest (InterleaveRequest) returns (InterleaveResponse);
}

service NeighborUpdateRpc {
  rpc neighborUpdate (NeighborUpdate) returns (NeighborUpdate);
}

service TemporaryConnectionRpc {
  rpc openConnection (TemporaryConnectionRequest) returns (TemporaryConnectionResponse);
  rpc closeConnection (CloseTemporaryConnection) returns (google.protobuf.Empty);
}

service NodeInfoRpc {
  rpc getInfo (NodeInfoRequest) returns (NodeInfoResponse);
}

message MessageID {
  string streamId = 1;
  int32 streamPartition = 2;
  int64 timestamp = 3;
  int32 sequenceNumber = 4;
  bytes publisherId = 5;
  string messageChainId = 6;
}

message MessageRef {
  int64 timestamp = 1;
  int32 sequenceNumber = 2;
}

enum ContentType {
  JSON = 0;
  BINARY = 1;
}

enum EncryptionType {
  NONE = 0;
  AES = 1;
}

enum SignatureType {
  LEGACY_SECP256K1 = 0;
  SECP256K1 = 1;
  ERC_1271 = 2;
}

message StreamMessage {
  // this is a required field but in generated NetworkRpc.ts it is incorrectly annotated as optional (NET-1082)
  MessageID messageId = 1;
  optional MessageRef previousMessageRef = 2;
  bytes signature = 3;
  SignatureType signatureType = 4;
  oneof body {
    ContentMessage contentMessage = 5;
    GroupKeyRequest groupKeyRequest = 6;
    GroupKeyResponse groupKeyResponse = 7;
  }
}

message ContentMessage {
  bytes content = 1;
  ContentType contentType = 2;
  EncryptionType encryptionType = 3;
  optional string groupKeyId = 4;
  optional GroupKey newGroupKey = 5;
}

message GroupKeyRequest {
  string requestId = 1;
  bytes recipientId = 2;
  bytes rsaPublicKey = 3;
  repeated string groupKeyIds = 4;
}

message GroupKeyResponse {
  string requestId = 1;
  bytes recipientId = 2;
  repeated GroupKey groupKeys = 3;
}

message GroupKey {
  string id = 1;
  bytes data = 2;
}

message StreamPartHandshakeRequest {
  string streamPartId = 1;
  string requestId = 2;
  optional bytes concurrentHandshakeNodeId = 3;
  repeated bytes neighborNodeIds = 4;
  optional bytes interleaveNodeId = 5;
}

message StreamPartHandshakeResponse {
  bool accepted = 1;
  string requestId = 2;
  optional dht.PeerDescriptor interleaveTargetDescriptor = 3;
}

message InterleaveRequest {
  // this is a required field but in generated NetworkRpc.ts it is incorrectly annotated as optional (NET-1082)
  dht.PeerDescriptor interleaveTargetDescriptor = 1;
}

message InterleaveResponse {
  bool accepted = 1;
}

message LeaveStreamPartNotice {
  string streamPartId = 1;
  bool isEntryPoint = 2;
}

message NeighborUpdate {
  string streamPartId = 1;
  bool removeMe = 2;
  repeated dht.PeerDescriptor neighborDescriptors = 3;
}

message ProxyConnectionRequest {
  ProxyDirection direction = 1;
  bytes userId = 2;
}

message ProxyConnectionResponse {
  bool accepted = 1;
}

message TemporaryConnectionRequest {
}

message TemporaryConnectionResponse {
  bool accepted = 1;
}

message CloseTemporaryConnection {
}

enum ProxyDirection {
  PUBLISH = 0;
  SUBSCRIBE = 1;
}

message StreamPartitionInfo {
  string id = 1;
  repeated dht.PeerDescriptor controlLayerNeighbors = 2;
  repeated dht.PeerDescriptor deprecatedContentDeliveryLayerNeighbors = 3;
  repeated ContentDeliveryLayerNeighborInfo contentDeliveryLayerNeighbors = 4;
}

message ContentDeliveryLayerNeighborInfo {
  dht.PeerDescriptor peerDescriptor = 1;
  optional int32 rtt = 2;
}

message ControlLayerInfo {
  repeated dht.PeerDescriptor neighbors = 1;
  repeated dht.PeerDescriptor connections = 2;
}

message NodeInfoRequest {}

message NodeInfoResponse {
  dht.PeerDescriptor peerDescriptor = 1;
  repeated StreamPartitionInfo streamPartitions = 2;
  ControlLayerInfo controlLayer = 3;
  string applicationVersion = 4;
}
