/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common";
export interface SponsorshipInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "addJoinPolicy" | "allocationPolicy" | "earningsWei" | "flag" | "flagMetadataJson" | "forceUnstake" | "forfeitedStakeWei" | "getEarnings" | "getFlag" | "getLeavePenalty" | "getMyStake" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "isFunded" | "isRunning" | "joinPolicies" | "joinTimeOfOperator" | "kickPolicy" | "leavePolicy" | "lockedStakeWei" | "metadata" | "minHorizonSeconds" | "minOperatorCount" | "minimumStakeOf" | "onTokenTransfer" | "operatorCount" | "reduceStakeTo" | "remainingWei" | "renounceRole" | "revokeRole" | "setAllocationPolicy" | "setKickPolicy" | "setLeavePolicy" | "solventUntilTimestamp" | "sponsor" | "stake" | "stakedWei" | "streamId" | "streamrConfig" | "supportsInterface" | "token" | "totalStakedWei" | "unstake" | "voteOnFlag" | "withdraw"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "FlagUpdate" | "Flagged" | "Initialized" | "InsolvencyEnded" | "InsolvencyStarted" | "OperatorJoined" | "OperatorKicked" | "OperatorLeft" | "OperatorSlashed" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SponsorshipReceived" | "SponsorshipUpdate" | "StakeLockUpdate" | "StakeUpdate"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "addJoinPolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "allocationPolicy", values?: undefined): string;
    encodeFunctionData(functionFragment: "earningsWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "flag", values: [AddressLike, string]): string;
    encodeFunctionData(functionFragment: "flagMetadataJson", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "forceUnstake", values?: undefined): string;
    encodeFunctionData(functionFragment: "forfeitedStakeWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "getEarnings", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getFlag", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getLeavePenalty", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getMyStake", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        string,
        string,
        AddressLike,
        AddressLike,
        [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ],
        AddressLike
    ]): string;
    encodeFunctionData(functionFragment: "isFunded", values?: undefined): string;
    encodeFunctionData(functionFragment: "isRunning", values?: undefined): string;
    encodeFunctionData(functionFragment: "joinPolicies", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "joinTimeOfOperator", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "kickPolicy", values?: undefined): string;
    encodeFunctionData(functionFragment: "leavePolicy", values?: undefined): string;
    encodeFunctionData(functionFragment: "lockedStakeWei", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "metadata", values?: undefined): string;
    encodeFunctionData(functionFragment: "minHorizonSeconds", values?: undefined): string;
    encodeFunctionData(functionFragment: "minOperatorCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumStakeOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "onTokenTransfer", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "operatorCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "reduceStakeTo", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "remainingWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setAllocationPolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setKickPolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setLeavePolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "solventUntilTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "sponsor", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stake", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakedWei", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "streamId", values?: undefined): string;
    encodeFunctionData(functionFragment: "streamrConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalStakedWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
    encodeFunctionData(functionFragment: "voteOnFlag", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addJoinPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allocationPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "earningsWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flag", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flagMetadataJson", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forceUnstake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forfeitedStakeWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getEarnings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFlag", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLeavePenalty", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMyStake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isFunded", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRunning", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "joinPolicies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "joinTimeOfOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "kickPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "leavePolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lockedStakeWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minHorizonSeconds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minOperatorCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumStakeOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onTokenTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "operatorCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reduceStakeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "remainingWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAllocationPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setKickPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLeavePolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "solventUntilTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakedWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "streamId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "streamrConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalStakedWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voteOnFlag", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
export declare namespace FlagUpdateEvent {
    type InputTuple = [
        target: AddressLike,
        status: BigNumberish,
        votesForKick: BigNumberish,
        votesAgainstKick: BigNumberish,
        voter: AddressLike,
        voterWeight: BigNumberish
    ];
    type OutputTuple = [
        target: string,
        status: bigint,
        votesForKick: bigint,
        votesAgainstKick: bigint,
        voter: string,
        voterWeight: bigint
    ];
    interface OutputObject {
        target: string;
        status: bigint;
        votesForKick: bigint;
        votesAgainstKick: bigint;
        voter: string;
        voterWeight: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace FlaggedEvent {
    type InputTuple = [
        target: AddressLike,
        flagger: AddressLike,
        targetStakeAtRiskWei: BigNumberish,
        reviewerCount: BigNumberish,
        flagMetadata: string
    ];
    type OutputTuple = [
        target: string,
        flagger: string,
        targetStakeAtRiskWei: bigint,
        reviewerCount: bigint,
        flagMetadata: string
    ];
    interface OutputObject {
        target: string;
        flagger: string;
        targetStakeAtRiskWei: bigint;
        reviewerCount: bigint;
        flagMetadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InsolvencyEndedEvent {
    type InputTuple = [
        endTimeStamp: BigNumberish,
        defaultedWeiPerStake: BigNumberish,
        defaultedWei: BigNumberish
    ];
    type OutputTuple = [
        endTimeStamp: bigint,
        defaultedWeiPerStake: bigint,
        defaultedWei: bigint
    ];
    interface OutputObject {
        endTimeStamp: bigint;
        defaultedWeiPerStake: bigint;
        defaultedWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InsolvencyStartedEvent {
    type InputTuple = [startTimeStamp: BigNumberish];
    type OutputTuple = [startTimeStamp: bigint];
    interface OutputObject {
        startTimeStamp: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OperatorJoinedEvent {
    type InputTuple = [operator: AddressLike];
    type OutputTuple = [operator: string];
    interface OutputObject {
        operator: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OperatorKickedEvent {
    type InputTuple = [operator: AddressLike];
    type OutputTuple = [operator: string];
    interface OutputObject {
        operator: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OperatorLeftEvent {
    type InputTuple = [
        operator: AddressLike,
        returnedStakeWei: BigNumberish
    ];
    type OutputTuple = [operator: string, returnedStakeWei: bigint];
    interface OutputObject {
        operator: string;
        returnedStakeWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OperatorSlashedEvent {
    type InputTuple = [operator: AddressLike, amountWei: BigNumberish];
    type OutputTuple = [operator: string, amountWei: bigint];
    interface OutputObject {
        operator: string;
        amountWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SponsorshipReceivedEvent {
    type InputTuple = [sponsor: AddressLike, amount: BigNumberish];
    type OutputTuple = [sponsor: string, amount: bigint];
    interface OutputObject {
        sponsor: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SponsorshipUpdateEvent {
    type InputTuple = [
        totalStakedWei: BigNumberish,
        remainingWei: BigNumberish,
        operatorCount: BigNumberish,
        isRunning: boolean
    ];
    type OutputTuple = [
        totalStakedWei: bigint,
        remainingWei: bigint,
        operatorCount: bigint,
        isRunning: boolean
    ];
    interface OutputObject {
        totalStakedWei: bigint;
        remainingWei: bigint;
        operatorCount: bigint;
        isRunning: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace StakeLockUpdateEvent {
    type InputTuple = [
        operator: AddressLike,
        lockedStakeWei: BigNumberish,
        minimumStakeWei: BigNumberish
    ];
    type OutputTuple = [
        operator: string,
        lockedStakeWei: bigint,
        minimumStakeWei: bigint
    ];
    interface OutputObject {
        operator: string;
        lockedStakeWei: bigint;
        minimumStakeWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace StakeUpdateEvent {
    type InputTuple = [
        operator: AddressLike,
        stakedWei: BigNumberish,
        earningsWei: BigNumberish
    ];
    type OutputTuple = [
        operator: string,
        stakedWei: bigint,
        earningsWei: bigint
    ];
    interface OutputObject {
        operator: string;
        stakedWei: bigint;
        earningsWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface Sponsorship extends BaseContract {
    connect(runner?: ContractRunner | null): Sponsorship;
    waitForDeployment(): Promise<this>;
    interface: SponsorshipInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    addJoinPolicy: TypedContractMethod<[
        newJoinPolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    allocationPolicy: TypedContractMethod<[], [string], "view">;
    earningsWei: TypedContractMethod<[], [bigint], "view">;
    flag: TypedContractMethod<[
        target: AddressLike,
        metadataJsonString: string
    ], [
        void
    ], "nonpayable">;
    flagMetadataJson: TypedContractMethod<[arg0: AddressLike], [string], "view">;
    forceUnstake: TypedContractMethod<[], [bigint], "nonpayable">;
    forfeitedStakeWei: TypedContractMethod<[], [bigint], "view">;
    getEarnings: TypedContractMethod<[operator: AddressLike], [bigint], "view">;
    getFlag: TypedContractMethod<[
        target: AddressLike
    ], [
        [bigint, string] & {
            flagData: bigint;
            flagMetadata: string;
        }
    ], "view">;
    getLeavePenalty: TypedContractMethod<[
        operator: AddressLike
    ], [
        bigint
    ], "view">;
    getMyStake: TypedContractMethod<[], [bigint], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialize: TypedContractMethod<[
        streamId_: string,
        metadata_: string,
        globalStreamrConfig: AddressLike,
        tokenAddress: AddressLike,
        initParams: [BigNumberish, BigNumberish, BigNumberish],
        initialAllocationPolicy: AddressLike
    ], [
        void
    ], "nonpayable">;
    isFunded: TypedContractMethod<[], [boolean], "view">;
    isRunning: TypedContractMethod<[], [boolean], "view">;
    joinPolicies: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    joinTimeOfOperator: TypedContractMethod<[
        arg0: AddressLike
    ], [
        bigint
    ], "view">;
    kickPolicy: TypedContractMethod<[], [string], "view">;
    leavePolicy: TypedContractMethod<[], [string], "view">;
    lockedStakeWei: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    metadata: TypedContractMethod<[], [string], "view">;
    minHorizonSeconds: TypedContractMethod<[], [bigint], "view">;
    minOperatorCount: TypedContractMethod<[], [bigint], "view">;
    minimumStakeOf: TypedContractMethod<[
        operator: AddressLike
    ], [
        bigint
    ], "view">;
    onTokenTransfer: TypedContractMethod<[
        sender: AddressLike,
        amount: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    operatorCount: TypedContractMethod<[], [bigint], "view">;
    reduceStakeTo: TypedContractMethod<[
        targetStakeWei: BigNumberish
    ], [
        bigint
    ], "nonpayable">;
    remainingWei: TypedContractMethod<[], [bigint], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setAllocationPolicy: TypedContractMethod<[
        newAllocationPolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setKickPolicy: TypedContractMethod<[
        newKickPolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setLeavePolicy: TypedContractMethod<[
        newLeavePolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    solventUntilTimestamp: TypedContractMethod<[], [bigint], "view">;
    sponsor: TypedContractMethod<[amountWei: BigNumberish], [void], "nonpayable">;
    stake: TypedContractMethod<[
        operator: AddressLike,
        amountWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    stakedWei: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    streamId: TypedContractMethod<[], [string], "view">;
    streamrConfig: TypedContractMethod<[], [string], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    token: TypedContractMethod<[], [string], "view">;
    totalStakedWei: TypedContractMethod<[], [bigint], "view">;
    unstake: TypedContractMethod<[], [bigint], "nonpayable">;
    voteOnFlag: TypedContractMethod<[
        target: AddressLike,
        voteData: BytesLike
    ], [
        void
    ], "nonpayable">;
    withdraw: TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "addJoinPolicy"): TypedContractMethod<[
        newJoinPolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "allocationPolicy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "earningsWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "flag"): TypedContractMethod<[
        target: AddressLike,
        metadataJsonString: string
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "flagMetadataJson"): TypedContractMethod<[arg0: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "forceUnstake"): TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "forfeitedStakeWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getEarnings"): TypedContractMethod<[operator: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getFlag"): TypedContractMethod<[
        target: AddressLike
    ], [
        [bigint, string] & {
            flagData: bigint;
            flagMetadata: string;
        }
    ], "view">;
    getFunction(nameOrSignature: "getLeavePenalty"): TypedContractMethod<[operator: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getMyStake"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        streamId_: string,
        metadata_: string,
        globalStreamrConfig: AddressLike,
        tokenAddress: AddressLike,
        initParams: [BigNumberish, BigNumberish, BigNumberish],
        initialAllocationPolicy: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isFunded"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "isRunning"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "joinPolicies"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "joinTimeOfOperator"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "kickPolicy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "leavePolicy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "lockedStakeWei"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "metadata"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "minHorizonSeconds"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "minOperatorCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "minimumStakeOf"): TypedContractMethod<[operator: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "onTokenTransfer"): TypedContractMethod<[
        sender: AddressLike,
        amount: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "operatorCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "reduceStakeTo"): TypedContractMethod<[
        targetStakeWei: BigNumberish
    ], [
        bigint
    ], "nonpayable">;
    getFunction(nameOrSignature: "remainingWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setAllocationPolicy"): TypedContractMethod<[
        newAllocationPolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setKickPolicy"): TypedContractMethod<[
        newKickPolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setLeavePolicy"): TypedContractMethod<[
        newLeavePolicy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "solventUntilTimestamp"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "sponsor"): TypedContractMethod<[amountWei: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "stake"): TypedContractMethod<[
        operator: AddressLike,
        amountWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "stakedWei"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "streamId"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "streamrConfig"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalStakedWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "unstake"): TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "voteOnFlag"): TypedContractMethod<[
        target: AddressLike,
        voteData: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[], [bigint], "nonpayable">;
    getEvent(key: "FlagUpdate"): TypedContractEvent<FlagUpdateEvent.InputTuple, FlagUpdateEvent.OutputTuple, FlagUpdateEvent.OutputObject>;
    getEvent(key: "Flagged"): TypedContractEvent<FlaggedEvent.InputTuple, FlaggedEvent.OutputTuple, FlaggedEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "InsolvencyEnded"): TypedContractEvent<InsolvencyEndedEvent.InputTuple, InsolvencyEndedEvent.OutputTuple, InsolvencyEndedEvent.OutputObject>;
    getEvent(key: "InsolvencyStarted"): TypedContractEvent<InsolvencyStartedEvent.InputTuple, InsolvencyStartedEvent.OutputTuple, InsolvencyStartedEvent.OutputObject>;
    getEvent(key: "OperatorJoined"): TypedContractEvent<OperatorJoinedEvent.InputTuple, OperatorJoinedEvent.OutputTuple, OperatorJoinedEvent.OutputObject>;
    getEvent(key: "OperatorKicked"): TypedContractEvent<OperatorKickedEvent.InputTuple, OperatorKickedEvent.OutputTuple, OperatorKickedEvent.OutputObject>;
    getEvent(key: "OperatorLeft"): TypedContractEvent<OperatorLeftEvent.InputTuple, OperatorLeftEvent.OutputTuple, OperatorLeftEvent.OutputObject>;
    getEvent(key: "OperatorSlashed"): TypedContractEvent<OperatorSlashedEvent.InputTuple, OperatorSlashedEvent.OutputTuple, OperatorSlashedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "SponsorshipReceived"): TypedContractEvent<SponsorshipReceivedEvent.InputTuple, SponsorshipReceivedEvent.OutputTuple, SponsorshipReceivedEvent.OutputObject>;
    getEvent(key: "SponsorshipUpdate"): TypedContractEvent<SponsorshipUpdateEvent.InputTuple, SponsorshipUpdateEvent.OutputTuple, SponsorshipUpdateEvent.OutputObject>;
    getEvent(key: "StakeLockUpdate"): TypedContractEvent<StakeLockUpdateEvent.InputTuple, StakeLockUpdateEvent.OutputTuple, StakeLockUpdateEvent.OutputObject>;
    getEvent(key: "StakeUpdate"): TypedContractEvent<StakeUpdateEvent.InputTuple, StakeUpdateEvent.OutputTuple, StakeUpdateEvent.OutputObject>;
    filters: {
        "FlagUpdate(address,uint8,uint256,uint256,address,int256)": TypedContractEvent<FlagUpdateEvent.InputTuple, FlagUpdateEvent.OutputTuple, FlagUpdateEvent.OutputObject>;
        FlagUpdate: TypedContractEvent<FlagUpdateEvent.InputTuple, FlagUpdateEvent.OutputTuple, FlagUpdateEvent.OutputObject>;
        "Flagged(address,address,uint256,uint256,string)": TypedContractEvent<FlaggedEvent.InputTuple, FlaggedEvent.OutputTuple, FlaggedEvent.OutputObject>;
        Flagged: TypedContractEvent<FlaggedEvent.InputTuple, FlaggedEvent.OutputTuple, FlaggedEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "InsolvencyEnded(uint256,uint256,uint256)": TypedContractEvent<InsolvencyEndedEvent.InputTuple, InsolvencyEndedEvent.OutputTuple, InsolvencyEndedEvent.OutputObject>;
        InsolvencyEnded: TypedContractEvent<InsolvencyEndedEvent.InputTuple, InsolvencyEndedEvent.OutputTuple, InsolvencyEndedEvent.OutputObject>;
        "InsolvencyStarted(uint256)": TypedContractEvent<InsolvencyStartedEvent.InputTuple, InsolvencyStartedEvent.OutputTuple, InsolvencyStartedEvent.OutputObject>;
        InsolvencyStarted: TypedContractEvent<InsolvencyStartedEvent.InputTuple, InsolvencyStartedEvent.OutputTuple, InsolvencyStartedEvent.OutputObject>;
        "OperatorJoined(address)": TypedContractEvent<OperatorJoinedEvent.InputTuple, OperatorJoinedEvent.OutputTuple, OperatorJoinedEvent.OutputObject>;
        OperatorJoined: TypedContractEvent<OperatorJoinedEvent.InputTuple, OperatorJoinedEvent.OutputTuple, OperatorJoinedEvent.OutputObject>;
        "OperatorKicked(address)": TypedContractEvent<OperatorKickedEvent.InputTuple, OperatorKickedEvent.OutputTuple, OperatorKickedEvent.OutputObject>;
        OperatorKicked: TypedContractEvent<OperatorKickedEvent.InputTuple, OperatorKickedEvent.OutputTuple, OperatorKickedEvent.OutputObject>;
        "OperatorLeft(address,uint256)": TypedContractEvent<OperatorLeftEvent.InputTuple, OperatorLeftEvent.OutputTuple, OperatorLeftEvent.OutputObject>;
        OperatorLeft: TypedContractEvent<OperatorLeftEvent.InputTuple, OperatorLeftEvent.OutputTuple, OperatorLeftEvent.OutputObject>;
        "OperatorSlashed(address,uint256)": TypedContractEvent<OperatorSlashedEvent.InputTuple, OperatorSlashedEvent.OutputTuple, OperatorSlashedEvent.OutputObject>;
        OperatorSlashed: TypedContractEvent<OperatorSlashedEvent.InputTuple, OperatorSlashedEvent.OutputTuple, OperatorSlashedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "SponsorshipReceived(address,uint256)": TypedContractEvent<SponsorshipReceivedEvent.InputTuple, SponsorshipReceivedEvent.OutputTuple, SponsorshipReceivedEvent.OutputObject>;
        SponsorshipReceived: TypedContractEvent<SponsorshipReceivedEvent.InputTuple, SponsorshipReceivedEvent.OutputTuple, SponsorshipReceivedEvent.OutputObject>;
        "SponsorshipUpdate(uint256,uint256,uint256,bool)": TypedContractEvent<SponsorshipUpdateEvent.InputTuple, SponsorshipUpdateEvent.OutputTuple, SponsorshipUpdateEvent.OutputObject>;
        SponsorshipUpdate: TypedContractEvent<SponsorshipUpdateEvent.InputTuple, SponsorshipUpdateEvent.OutputTuple, SponsorshipUpdateEvent.OutputObject>;
        "StakeLockUpdate(address,uint256,uint256)": TypedContractEvent<StakeLockUpdateEvent.InputTuple, StakeLockUpdateEvent.OutputTuple, StakeLockUpdateEvent.OutputObject>;
        StakeLockUpdate: TypedContractEvent<StakeLockUpdateEvent.InputTuple, StakeLockUpdateEvent.OutputTuple, StakeLockUpdateEvent.OutputObject>;
        "StakeUpdate(address,uint256,uint256)": TypedContractEvent<StakeUpdateEvent.InputTuple, StakeUpdateEvent.OutputTuple, StakeUpdateEvent.OutputObject>;
        StakeUpdate: TypedContractEvent<StakeUpdateEvent.InputTuple, StakeUpdateEvent.OutputTuple, StakeUpdateEvent.OutputObject>;
    };
}
