/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common";
export declare namespace Operator {
    type UndelegationQueueEntryStruct = {
        delegator: AddressLike;
        amountWei: BigNumberish;
        timestamp: BigNumberish;
    };
    type UndelegationQueueEntryStructOutput = [
        delegator: string,
        amountWei: bigint,
        timestamp: bigint
    ] & {
        delegator: string;
        amountWei: bigint;
        timestamp: bigint;
    };
}
export interface OperatorInterface extends Interface {
    getFunction(nameOrSignature: "CONTROLLER_ROLE" | "DEFAULT_ADMIN_ROLE" | "OWNER_ROLE" | "allowance" | "approve" | "balanceInData" | "balanceOf" | "decimals" | "decreaseAllowance" | "delegate" | "delegationPolicy" | "exchangeRatePolicy" | "flag" | "forceUnstake" | "getNodeAddresses" | "getRoleAdmin" | "getSponsorshipsAndEarnings" | "getStreamMetadata" | "grantRole" | "hasRole" | "heartbeat" | "increaseAllowance" | "indexOfSponsorships" | "initialize" | "latestDelegationTimestamp" | "metadata" | "name" | "nodeIndex" | "nodeModule" | "nodes" | "onKick" | "onReviewRequest" | "onSlash" | "onTokenTransfer" | "operatorsCutFraction" | "owner" | "payOutFirstInQueue" | "payOutQueue" | "queueCurrentIndex" | "queueEntryAt" | "queueIsEmpty" | "queueLastIndex" | "queueModule" | "reduceStakeTo" | "reduceStakeWithoutQueue" | "renounceRole" | "revokeRole" | "setDelegationPolicy" | "setExchangeRatePolicy" | "setNodeAddresses" | "setUndelegationPolicy" | "slashedIn" | "sponsorships" | "stake" | "stakeModule" | "stakedInto" | "streamId" | "streamRegistry" | "streamrConfig" | "supportsInterface" | "symbol" | "token" | "totalSlashedInSponsorshipsWei" | "totalStakedIntoSponsorshipsWei" | "totalSupply" | "transfer" | "transferFrom" | "triggerAnotherOperatorWithdraw" | "undelegate" | "undelegationPolicy" | "undelegationQueue" | "unstake" | "unstakeWithoutQueue" | "updateMetadata" | "updateNodeAddresses" | "updateOperatorsCutFraction" | "updateStreamMetadata" | "valueWithoutEarnings" | "version" | "voteOnFlag" | "withdrawEarningsFromSponsorships" | "withdrawEarningsFromSponsorshipsWithoutQueue"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "BalanceUpdate" | "Delegated" | "Heartbeat" | "Initialized" | "Loss" | "MetadataUpdated" | "NodesSet" | "OperatorSlashed" | "OperatorValueUpdate" | "Profit" | "QueueUpdated" | "QueuedDataPayout" | "ReviewRequest" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "StakeUpdate" | "Staked" | "Transfer" | "Undelegated" | "Unstaked"): EventFragment;
    encodeFunctionData(functionFragment: "CONTROLLER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OWNER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceInData", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "delegate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "delegationPolicy", values?: undefined): string;
    encodeFunctionData(functionFragment: "exchangeRatePolicy", values?: undefined): string;
    encodeFunctionData(functionFragment: "flag", values: [AddressLike, AddressLike, string]): string;
    encodeFunctionData(functionFragment: "forceUnstake", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getNodeAddresses", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSponsorshipsAndEarnings", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStreamMetadata", values?: undefined): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "heartbeat", values: [string]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "indexOfSponsorships", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        AddressLike,
        AddressLike,
        AddressLike,
        string,
        string,
        BigNumberish,
        [
            AddressLike,
            AddressLike,
            AddressLike
        ]
    ]): string;
    encodeFunctionData(functionFragment: "latestDelegationTimestamp", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "metadata", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nodeIndex", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "nodeModule", values?: undefined): string;
    encodeFunctionData(functionFragment: "nodes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "onKick", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "onReviewRequest", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "onSlash", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "onTokenTransfer", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "operatorsCutFraction", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "payOutFirstInQueue", values?: undefined): string;
    encodeFunctionData(functionFragment: "payOutQueue", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "queueCurrentIndex", values?: undefined): string;
    encodeFunctionData(functionFragment: "queueEntryAt", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "queueIsEmpty", values?: undefined): string;
    encodeFunctionData(functionFragment: "queueLastIndex", values?: undefined): string;
    encodeFunctionData(functionFragment: "queueModule", values?: undefined): string;
    encodeFunctionData(functionFragment: "reduceStakeTo", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "reduceStakeWithoutQueue", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "setDelegationPolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setExchangeRatePolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setNodeAddresses", values: [AddressLike[]]): string;
    encodeFunctionData(functionFragment: "setUndelegationPolicy", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "slashedIn", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "sponsorships", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stake", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakeModule", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakedInto", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "streamId", values?: undefined): string;
    encodeFunctionData(functionFragment: "streamRegistry", values?: undefined): string;
    encodeFunctionData(functionFragment: "streamrConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSlashedInSponsorshipsWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalStakedIntoSponsorshipsWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "triggerAnotherOperatorWithdraw", values: [AddressLike, AddressLike[]]): string;
    encodeFunctionData(functionFragment: "undelegate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "undelegationPolicy", values?: undefined): string;
    encodeFunctionData(functionFragment: "undelegationQueue", values?: undefined): string;
    encodeFunctionData(functionFragment: "unstake", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "unstakeWithoutQueue", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateMetadata", values: [string]): string;
    encodeFunctionData(functionFragment: "updateNodeAddresses", values: [AddressLike[], AddressLike[]]): string;
    encodeFunctionData(functionFragment: "updateOperatorsCutFraction", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateStreamMetadata", values: [string]): string;
    encodeFunctionData(functionFragment: "valueWithoutEarnings", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "voteOnFlag", values: [AddressLike, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "withdrawEarningsFromSponsorships", values: [AddressLike[]]): string;
    encodeFunctionData(functionFragment: "withdrawEarningsFromSponsorshipsWithoutQueue", values: [AddressLike[]]): string;
    decodeFunctionResult(functionFragment: "CONTROLLER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceInData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegationPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "exchangeRatePolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flag", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "forceUnstake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNodeAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSponsorshipsAndEarnings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStreamMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "indexOfSponsorships", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "latestDelegationTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "metadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nodeIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nodeModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onKick", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onReviewRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onSlash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onTokenTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "operatorsCutFraction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payOutFirstInQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "payOutQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queueCurrentIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queueEntryAt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queueIsEmpty", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queueLastIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queueModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reduceStakeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reduceStakeWithoutQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDelegationPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExchangeRatePolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNodeAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUndelegationPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "slashedIn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sponsorships", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeModule", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakedInto", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "streamId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "streamRegistry", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "streamrConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSlashedInSponsorshipsWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalStakedIntoSponsorshipsWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "triggerAnotherOperatorWithdraw", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "undelegationPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "undelegationQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unstakeWithoutQueue", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateNodeAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateOperatorsCutFraction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateStreamMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "valueWithoutEarnings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voteOnFlag", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawEarningsFromSponsorships", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawEarningsFromSponsorshipsWithoutQueue", data: BytesLike): Result;
}
export declare namespace ApprovalEvent {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, value: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace BalanceUpdateEvent {
    type InputTuple = [
        delegator: AddressLike,
        balanceWei: BigNumberish,
        totalSupplyWei: BigNumberish,
        dataValueWithoutEarnings: BigNumberish
    ];
    type OutputTuple = [
        delegator: string,
        balanceWei: bigint,
        totalSupplyWei: bigint,
        dataValueWithoutEarnings: bigint
    ];
    interface OutputObject {
        delegator: string;
        balanceWei: bigint;
        totalSupplyWei: bigint;
        dataValueWithoutEarnings: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DelegatedEvent {
    type InputTuple = [
        delegator: AddressLike,
        amountDataWei: BigNumberish
    ];
    type OutputTuple = [delegator: string, amountDataWei: bigint];
    interface OutputObject {
        delegator: string;
        amountDataWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace HeartbeatEvent {
    type InputTuple = [nodeAddress: AddressLike, jsonData: string];
    type OutputTuple = [nodeAddress: string, jsonData: string];
    interface OutputObject {
        nodeAddress: string;
        jsonData: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace LossEvent {
    type InputTuple = [valueDecreaseWei: BigNumberish];
    type OutputTuple = [valueDecreaseWei: bigint];
    interface OutputObject {
        valueDecreaseWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MetadataUpdatedEvent {
    type InputTuple = [
        metadataJsonString: string,
        operatorAddress: AddressLike,
        operatorsCutFraction: BigNumberish
    ];
    type OutputTuple = [
        metadataJsonString: string,
        operatorAddress: string,
        operatorsCutFraction: bigint
    ];
    interface OutputObject {
        metadataJsonString: string;
        operatorAddress: string;
        operatorsCutFraction: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace NodesSetEvent {
    type InputTuple = [nodes: AddressLike[]];
    type OutputTuple = [nodes: string[]];
    interface OutputObject {
        nodes: string[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OperatorSlashedEvent {
    type InputTuple = [
        slashingAmountDataWei: BigNumberish,
        slashingAmountInOperatorTokensWei: BigNumberish,
        actuallySlashedInOperatorTokensWei: BigNumberish
    ];
    type OutputTuple = [
        slashingAmountDataWei: bigint,
        slashingAmountInOperatorTokensWei: bigint,
        actuallySlashedInOperatorTokensWei: bigint
    ];
    interface OutputObject {
        slashingAmountDataWei: bigint;
        slashingAmountInOperatorTokensWei: bigint;
        actuallySlashedInOperatorTokensWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OperatorValueUpdateEvent {
    type InputTuple = [
        totalStakeInSponsorshipsWei: BigNumberish,
        dataTokenBalanceWei: BigNumberish
    ];
    type OutputTuple = [
        totalStakeInSponsorshipsWei: bigint,
        dataTokenBalanceWei: bigint
    ];
    interface OutputObject {
        totalStakeInSponsorshipsWei: bigint;
        dataTokenBalanceWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProfitEvent {
    type InputTuple = [
        valueIncreaseWei: BigNumberish,
        operatorsCutDataWei: BigNumberish,
        protocolFeeDataWei: BigNumberish
    ];
    type OutputTuple = [
        valueIncreaseWei: bigint,
        operatorsCutDataWei: bigint,
        protocolFeeDataWei: bigint
    ];
    interface OutputObject {
        valueIncreaseWei: bigint;
        operatorsCutDataWei: bigint;
        protocolFeeDataWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace QueueUpdatedEvent {
    type InputTuple = [
        delegator: AddressLike,
        amountWei: BigNumberish,
        queueIndex: BigNumberish
    ];
    type OutputTuple = [
        delegator: string,
        amountWei: bigint,
        queueIndex: bigint
    ];
    interface OutputObject {
        delegator: string;
        amountWei: bigint;
        queueIndex: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace QueuedDataPayoutEvent {
    type InputTuple = [
        delegator: AddressLike,
        amountWei: BigNumberish,
        queueIndex: BigNumberish
    ];
    type OutputTuple = [
        delegator: string,
        amountWei: bigint,
        queueIndex: bigint
    ];
    interface OutputObject {
        delegator: string;
        amountWei: bigint;
        queueIndex: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ReviewRequestEvent {
    type InputTuple = [
        sponsorship: AddressLike,
        targetOperator: AddressLike,
        voteStartTimestamp: BigNumberish,
        voteEndTimestamp: BigNumberish,
        flagMetadata: string
    ];
    type OutputTuple = [
        sponsorship: string,
        targetOperator: string,
        voteStartTimestamp: bigint,
        voteEndTimestamp: bigint,
        flagMetadata: string
    ];
    interface OutputObject {
        sponsorship: string;
        targetOperator: string;
        voteStartTimestamp: bigint;
        voteEndTimestamp: bigint;
        flagMetadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace StakeUpdateEvent {
    type InputTuple = [sponsorship: AddressLike, stakedWei: BigNumberish];
    type OutputTuple = [sponsorship: string, stakedWei: bigint];
    interface OutputObject {
        sponsorship: string;
        stakedWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace StakedEvent {
    type InputTuple = [sponsorship: AddressLike];
    type OutputTuple = [sponsorship: string];
    interface OutputObject {
        sponsorship: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace TransferEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        value: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, value: bigint];
    interface OutputObject {
        from: string;
        to: string;
        value: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UndelegatedEvent {
    type InputTuple = [
        delegator: AddressLike,
        amountDataWei: BigNumberish
    ];
    type OutputTuple = [delegator: string, amountDataWei: bigint];
    interface OutputObject {
        delegator: string;
        amountDataWei: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UnstakedEvent {
    type InputTuple = [sponsorship: AddressLike];
    type OutputTuple = [sponsorship: string];
    interface OutputObject {
        sponsorship: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface Operator extends BaseContract {
    connect(runner?: ContractRunner | null): Operator;
    waitForDeployment(): Promise<this>;
    interface: OperatorInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    CONTROLLER_ROLE: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    OWNER_ROLE: TypedContractMethod<[], [string], "view">;
    allowance: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceInData: TypedContractMethod<[
        delegator: AddressLike
    ], [
        bigint
    ], "view">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    decreaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    delegate: TypedContractMethod<[
        amountWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    delegationPolicy: TypedContractMethod<[], [string], "view">;
    exchangeRatePolicy: TypedContractMethod<[], [string], "view">;
    flag: TypedContractMethod<[
        sponsorship: AddressLike,
        targetOperator: AddressLike,
        flagMetadata: string
    ], [
        void
    ], "nonpayable">;
    forceUnstake: TypedContractMethod<[
        sponsorship: AddressLike,
        maxQueuePayoutIterations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getNodeAddresses: TypedContractMethod<[], [string[]], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getSponsorshipsAndEarnings: TypedContractMethod<[
    ], [
        [
            string[],
            bigint[],
            bigint
        ] & {
            addresses: string[];
            earnings: bigint[];
            maxAllowedEarnings: bigint;
        }
    ], "view">;
    getStreamMetadata: TypedContractMethod<[], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    heartbeat: TypedContractMethod<[jsonData: string], [void], "nonpayable">;
    increaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    indexOfSponsorships: TypedContractMethod<[
        arg0: AddressLike
    ], [
        bigint
    ], "view">;
    initialize: TypedContractMethod<[
        tokenAddress: AddressLike,
        config: AddressLike,
        ownerAddress: AddressLike,
        operatorTokenName: string,
        operatorMetadataJson: string,
        operatorsCut: BigNumberish,
        modules: [AddressLike, AddressLike, AddressLike]
    ], [
        void
    ], "nonpayable">;
    latestDelegationTimestamp: TypedContractMethod<[
        arg0: AddressLike
    ], [
        bigint
    ], "view">;
    metadata: TypedContractMethod<[], [string], "view">;
    name: TypedContractMethod<[], [string], "view">;
    nodeIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    nodeModule: TypedContractMethod<[], [string], "view">;
    nodes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    onKick: TypedContractMethod<[
        amountSlashedDataWei: BigNumberish,
        receivedPayoutWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    onReviewRequest: TypedContractMethod<[
        targetOperator: AddressLike
    ], [
        void
    ], "nonpayable">;
    onSlash: TypedContractMethod<[
        amountSlashed: BigNumberish
    ], [
        void
    ], "nonpayable">;
    onTokenTransfer: TypedContractMethod<[
        sender: AddressLike,
        amount: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    operatorsCutFraction: TypedContractMethod<[], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    payOutFirstInQueue: TypedContractMethod<[], [boolean], "nonpayable">;
    payOutQueue: TypedContractMethod<[
        maxIterations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    queueCurrentIndex: TypedContractMethod<[], [bigint], "view">;
    queueEntryAt: TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [
            string,
            bigint,
            bigint
        ] & {
            delegator: string;
            amountWei: bigint;
            timestamp: bigint;
        }
    ], "view">;
    queueIsEmpty: TypedContractMethod<[], [boolean], "view">;
    queueLastIndex: TypedContractMethod<[], [bigint], "view">;
    queueModule: TypedContractMethod<[], [string], "view">;
    reduceStakeTo: TypedContractMethod<[
        sponsorship: AddressLike,
        targetStakeWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    reduceStakeWithoutQueue: TypedContractMethod<[
        sponsorship: AddressLike,
        targetStakeWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    setDelegationPolicy: TypedContractMethod<[
        policy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setExchangeRatePolicy: TypedContractMethod<[
        policy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setNodeAddresses: TypedContractMethod<[
        newNodes: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    setUndelegationPolicy: TypedContractMethod<[
        policy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    slashedIn: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    sponsorships: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    stake: TypedContractMethod<[
        sponsorship: AddressLike,
        amountWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    stakeModule: TypedContractMethod<[], [string], "view">;
    stakedInto: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    streamId: TypedContractMethod<[], [string], "view">;
    streamRegistry: TypedContractMethod<[], [string], "view">;
    streamrConfig: TypedContractMethod<[], [string], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    token: TypedContractMethod<[], [string], "view">;
    totalSlashedInSponsorshipsWei: TypedContractMethod<[], [bigint], "view">;
    totalStakedIntoSponsorshipsWei: TypedContractMethod<[], [bigint], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    triggerAnotherOperatorWithdraw: TypedContractMethod<[
        other: AddressLike,
        sponsorshipAddresses: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    undelegate: TypedContractMethod<[
        amountDataWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    undelegationPolicy: TypedContractMethod<[], [string], "view">;
    undelegationQueue: TypedContractMethod<[
    ], [
        Operator.UndelegationQueueEntryStructOutput[]
    ], "view">;
    unstake: TypedContractMethod<[
        sponsorship: AddressLike
    ], [
        void
    ], "nonpayable">;
    unstakeWithoutQueue: TypedContractMethod<[
        sponsorship: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateMetadata: TypedContractMethod<[
        metadataJsonString: string
    ], [
        void
    ], "nonpayable">;
    updateNodeAddresses: TypedContractMethod<[
        addNodes: AddressLike[],
        removeNodes: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    updateOperatorsCutFraction: TypedContractMethod<[
        newOperatorsCutFraction: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateStreamMetadata: TypedContractMethod<[
        metadataJsonString: string
    ], [
        void
    ], "nonpayable">;
    valueWithoutEarnings: TypedContractMethod<[], [bigint], "view">;
    version: TypedContractMethod<[], [bigint], "view">;
    voteOnFlag: TypedContractMethod<[
        sponsorship: AddressLike,
        targetOperator: AddressLike,
        voteData: BytesLike
    ], [
        void
    ], "nonpayable">;
    withdrawEarningsFromSponsorships: TypedContractMethod<[
        sponsorshipAddresses: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    withdrawEarningsFromSponsorshipsWithoutQueue: TypedContractMethod<[
        sponsorshipAddresses: AddressLike[]
    ], [
        bigint
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "CONTROLLER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "OWNER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceInData"): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "decreaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        subtractedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "delegate"): TypedContractMethod<[amountWei: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "delegationPolicy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "exchangeRatePolicy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "flag"): TypedContractMethod<[
        sponsorship: AddressLike,
        targetOperator: AddressLike,
        flagMetadata: string
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "forceUnstake"): TypedContractMethod<[
        sponsorship: AddressLike,
        maxQueuePayoutIterations: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "getNodeAddresses"): TypedContractMethod<[], [string[]], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getSponsorshipsAndEarnings"): TypedContractMethod<[
    ], [
        [
            string[],
            bigint[],
            bigint
        ] & {
            addresses: string[];
            earnings: bigint[];
            maxAllowedEarnings: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "getStreamMetadata"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "heartbeat"): TypedContractMethod<[jsonData: string], [void], "nonpayable">;
    getFunction(nameOrSignature: "increaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        addedValue: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "indexOfSponsorships"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        tokenAddress: AddressLike,
        config: AddressLike,
        ownerAddress: AddressLike,
        operatorTokenName: string,
        operatorMetadataJson: string,
        operatorsCut: BigNumberish,
        modules: [AddressLike, AddressLike, AddressLike]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "latestDelegationTimestamp"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "metadata"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nodeIndex"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "nodeModule"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nodes"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "onKick"): TypedContractMethod<[
        amountSlashedDataWei: BigNumberish,
        receivedPayoutWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "onReviewRequest"): TypedContractMethod<[targetOperator: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "onSlash"): TypedContractMethod<[amountSlashed: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "onTokenTransfer"): TypedContractMethod<[
        sender: AddressLike,
        amount: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "operatorsCutFraction"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "payOutFirstInQueue"): TypedContractMethod<[], [boolean], "nonpayable">;
    getFunction(nameOrSignature: "payOutQueue"): TypedContractMethod<[maxIterations: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "queueCurrentIndex"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "queueEntryAt"): TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [
            string,
            bigint,
            bigint
        ] & {
            delegator: string;
            amountWei: bigint;
            timestamp: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "queueIsEmpty"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "queueLastIndex"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "queueModule"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "reduceStakeTo"): TypedContractMethod<[
        sponsorship: AddressLike,
        targetStakeWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "reduceStakeWithoutQueue"): TypedContractMethod<[
        sponsorship: AddressLike,
        targetStakeWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setDelegationPolicy"): TypedContractMethod<[
        policy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setExchangeRatePolicy"): TypedContractMethod<[
        policy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setNodeAddresses"): TypedContractMethod<[newNodes: AddressLike[]], [void], "nonpayable">;
    getFunction(nameOrSignature: "setUndelegationPolicy"): TypedContractMethod<[
        policy: AddressLike,
        param: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "slashedIn"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "sponsorships"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "stake"): TypedContractMethod<[
        sponsorship: AddressLike,
        amountWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "stakeModule"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "stakedInto"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "streamId"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "streamRegistry"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "streamrConfig"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "token"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalSlashedInSponsorshipsWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "totalStakedIntoSponsorshipsWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "triggerAnotherOperatorWithdraw"): TypedContractMethod<[
        other: AddressLike,
        sponsorshipAddresses: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "undelegate"): TypedContractMethod<[amountDataWei: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "undelegationPolicy"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "undelegationQueue"): TypedContractMethod<[
    ], [
        Operator.UndelegationQueueEntryStructOutput[]
    ], "view">;
    getFunction(nameOrSignature: "unstake"): TypedContractMethod<[sponsorship: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "unstakeWithoutQueue"): TypedContractMethod<[sponsorship: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateMetadata"): TypedContractMethod<[metadataJsonString: string], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateNodeAddresses"): TypedContractMethod<[
        addNodes: AddressLike[],
        removeNodes: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateOperatorsCutFraction"): TypedContractMethod<[
        newOperatorsCutFraction: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateStreamMetadata"): TypedContractMethod<[metadataJsonString: string], [void], "nonpayable">;
    getFunction(nameOrSignature: "valueWithoutEarnings"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "voteOnFlag"): TypedContractMethod<[
        sponsorship: AddressLike,
        targetOperator: AddressLike,
        voteData: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawEarningsFromSponsorships"): TypedContractMethod<[
        sponsorshipAddresses: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "withdrawEarningsFromSponsorshipsWithoutQueue"): TypedContractMethod<[
        sponsorshipAddresses: AddressLike[]
    ], [
        bigint
    ], "nonpayable">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    getEvent(key: "BalanceUpdate"): TypedContractEvent<BalanceUpdateEvent.InputTuple, BalanceUpdateEvent.OutputTuple, BalanceUpdateEvent.OutputObject>;
    getEvent(key: "Delegated"): TypedContractEvent<DelegatedEvent.InputTuple, DelegatedEvent.OutputTuple, DelegatedEvent.OutputObject>;
    getEvent(key: "Heartbeat"): TypedContractEvent<HeartbeatEvent.InputTuple, HeartbeatEvent.OutputTuple, HeartbeatEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "Loss"): TypedContractEvent<LossEvent.InputTuple, LossEvent.OutputTuple, LossEvent.OutputObject>;
    getEvent(key: "MetadataUpdated"): TypedContractEvent<MetadataUpdatedEvent.InputTuple, MetadataUpdatedEvent.OutputTuple, MetadataUpdatedEvent.OutputObject>;
    getEvent(key: "NodesSet"): TypedContractEvent<NodesSetEvent.InputTuple, NodesSetEvent.OutputTuple, NodesSetEvent.OutputObject>;
    getEvent(key: "OperatorSlashed"): TypedContractEvent<OperatorSlashedEvent.InputTuple, OperatorSlashedEvent.OutputTuple, OperatorSlashedEvent.OutputObject>;
    getEvent(key: "OperatorValueUpdate"): TypedContractEvent<OperatorValueUpdateEvent.InputTuple, OperatorValueUpdateEvent.OutputTuple, OperatorValueUpdateEvent.OutputObject>;
    getEvent(key: "Profit"): TypedContractEvent<ProfitEvent.InputTuple, ProfitEvent.OutputTuple, ProfitEvent.OutputObject>;
    getEvent(key: "QueueUpdated"): TypedContractEvent<QueueUpdatedEvent.InputTuple, QueueUpdatedEvent.OutputTuple, QueueUpdatedEvent.OutputObject>;
    getEvent(key: "QueuedDataPayout"): TypedContractEvent<QueuedDataPayoutEvent.InputTuple, QueuedDataPayoutEvent.OutputTuple, QueuedDataPayoutEvent.OutputObject>;
    getEvent(key: "ReviewRequest"): TypedContractEvent<ReviewRequestEvent.InputTuple, ReviewRequestEvent.OutputTuple, ReviewRequestEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "StakeUpdate"): TypedContractEvent<StakeUpdateEvent.InputTuple, StakeUpdateEvent.OutputTuple, StakeUpdateEvent.OutputObject>;
    getEvent(key: "Staked"): TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    getEvent(key: "Undelegated"): TypedContractEvent<UndelegatedEvent.InputTuple, UndelegatedEvent.OutputTuple, UndelegatedEvent.OutputObject>;
    getEvent(key: "Unstaked"): TypedContractEvent<UnstakedEvent.InputTuple, UnstakedEvent.OutputTuple, UnstakedEvent.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        "BalanceUpdate(address,uint256,uint256,uint256)": TypedContractEvent<BalanceUpdateEvent.InputTuple, BalanceUpdateEvent.OutputTuple, BalanceUpdateEvent.OutputObject>;
        BalanceUpdate: TypedContractEvent<BalanceUpdateEvent.InputTuple, BalanceUpdateEvent.OutputTuple, BalanceUpdateEvent.OutputObject>;
        "Delegated(address,uint256)": TypedContractEvent<DelegatedEvent.InputTuple, DelegatedEvent.OutputTuple, DelegatedEvent.OutputObject>;
        Delegated: TypedContractEvent<DelegatedEvent.InputTuple, DelegatedEvent.OutputTuple, DelegatedEvent.OutputObject>;
        "Heartbeat(address,string)": TypedContractEvent<HeartbeatEvent.InputTuple, HeartbeatEvent.OutputTuple, HeartbeatEvent.OutputObject>;
        Heartbeat: TypedContractEvent<HeartbeatEvent.InputTuple, HeartbeatEvent.OutputTuple, HeartbeatEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "Loss(uint256)": TypedContractEvent<LossEvent.InputTuple, LossEvent.OutputTuple, LossEvent.OutputObject>;
        Loss: TypedContractEvent<LossEvent.InputTuple, LossEvent.OutputTuple, LossEvent.OutputObject>;
        "MetadataUpdated(string,address,uint256)": TypedContractEvent<MetadataUpdatedEvent.InputTuple, MetadataUpdatedEvent.OutputTuple, MetadataUpdatedEvent.OutputObject>;
        MetadataUpdated: TypedContractEvent<MetadataUpdatedEvent.InputTuple, MetadataUpdatedEvent.OutputTuple, MetadataUpdatedEvent.OutputObject>;
        "NodesSet(address[])": TypedContractEvent<NodesSetEvent.InputTuple, NodesSetEvent.OutputTuple, NodesSetEvent.OutputObject>;
        NodesSet: TypedContractEvent<NodesSetEvent.InputTuple, NodesSetEvent.OutputTuple, NodesSetEvent.OutputObject>;
        "OperatorSlashed(uint256,uint256,uint256)": TypedContractEvent<OperatorSlashedEvent.InputTuple, OperatorSlashedEvent.OutputTuple, OperatorSlashedEvent.OutputObject>;
        OperatorSlashed: TypedContractEvent<OperatorSlashedEvent.InputTuple, OperatorSlashedEvent.OutputTuple, OperatorSlashedEvent.OutputObject>;
        "OperatorValueUpdate(uint256,uint256)": TypedContractEvent<OperatorValueUpdateEvent.InputTuple, OperatorValueUpdateEvent.OutputTuple, OperatorValueUpdateEvent.OutputObject>;
        OperatorValueUpdate: TypedContractEvent<OperatorValueUpdateEvent.InputTuple, OperatorValueUpdateEvent.OutputTuple, OperatorValueUpdateEvent.OutputObject>;
        "Profit(uint256,uint256,uint256)": TypedContractEvent<ProfitEvent.InputTuple, ProfitEvent.OutputTuple, ProfitEvent.OutputObject>;
        Profit: TypedContractEvent<ProfitEvent.InputTuple, ProfitEvent.OutputTuple, ProfitEvent.OutputObject>;
        "QueueUpdated(address,uint256,uint256)": TypedContractEvent<QueueUpdatedEvent.InputTuple, QueueUpdatedEvent.OutputTuple, QueueUpdatedEvent.OutputObject>;
        QueueUpdated: TypedContractEvent<QueueUpdatedEvent.InputTuple, QueueUpdatedEvent.OutputTuple, QueueUpdatedEvent.OutputObject>;
        "QueuedDataPayout(address,uint256,uint256)": TypedContractEvent<QueuedDataPayoutEvent.InputTuple, QueuedDataPayoutEvent.OutputTuple, QueuedDataPayoutEvent.OutputObject>;
        QueuedDataPayout: TypedContractEvent<QueuedDataPayoutEvent.InputTuple, QueuedDataPayoutEvent.OutputTuple, QueuedDataPayoutEvent.OutputObject>;
        "ReviewRequest(address,address,uint256,uint256,string)": TypedContractEvent<ReviewRequestEvent.InputTuple, ReviewRequestEvent.OutputTuple, ReviewRequestEvent.OutputObject>;
        ReviewRequest: TypedContractEvent<ReviewRequestEvent.InputTuple, ReviewRequestEvent.OutputTuple, ReviewRequestEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "StakeUpdate(address,uint256)": TypedContractEvent<StakeUpdateEvent.InputTuple, StakeUpdateEvent.OutputTuple, StakeUpdateEvent.OutputObject>;
        StakeUpdate: TypedContractEvent<StakeUpdateEvent.InputTuple, StakeUpdateEvent.OutputTuple, StakeUpdateEvent.OutputObject>;
        "Staked(address)": TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
        Staked: TypedContractEvent<StakedEvent.InputTuple, StakedEvent.OutputTuple, StakedEvent.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        "Undelegated(address,uint256)": TypedContractEvent<UndelegatedEvent.InputTuple, UndelegatedEvent.OutputTuple, UndelegatedEvent.OutputObject>;
        Undelegated: TypedContractEvent<UndelegatedEvent.InputTuple, UndelegatedEvent.OutputTuple, UndelegatedEvent.OutputObject>;
        "Unstaked(address)": TypedContractEvent<UnstakedEvent.InputTuple, UnstakedEvent.OutputTuple, UnstakedEvent.OutputObject>;
        Unstaked: TypedContractEvent<UnstakedEvent.InputTuple, UnstakedEvent.OutputTuple, UnstakedEvent.OutputObject>;
    };
}
