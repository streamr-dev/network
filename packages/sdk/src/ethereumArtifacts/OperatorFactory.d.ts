/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common";
export interface OperatorFactoryInterface extends Interface {
    getFunction(nameOrSignature: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "addTrustedPolicies" | "addTrustedPolicy" | "deployOperator" | "deploymentTimestamp" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "isTrustedPolicy" | "nodeModuleTemplate" | "onTokenTransfer" | "operatorTemplate" | "operators" | "predictAddress" | "proxiableUUID" | "queueModuleTemplate" | "removeTrustedPolicy" | "renounceRole" | "revokeRole" | "stakeModuleTemplate" | "stakedWei" | "streamrConfig" | "supportsInterface" | "tokenAddress" | "totalStakedWei" | "trustedPolicies" | "updateTemplates" | "upgradeTo" | "upgradeToAndCall" | "voterCount" | "voterUpdate" | "voters" | "votersIndex"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AdminChanged" | "BeaconUpgraded" | "Initialized" | "NewOperator" | "PolicyWhitelisted" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "TemplateAddresses" | "Upgraded" | "VoterUpdate"): EventFragment;
    encodeFunctionData(functionFragment: "ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "addTrustedPolicies", values: [AddressLike[]]): string;
    encodeFunctionData(functionFragment: "addTrustedPolicy", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "deployOperator", values: [
        BigNumberish,
        string,
        string,
        [
            AddressLike,
            AddressLike,
            AddressLike
        ],
        [
            BigNumberish,
            BigNumberish,
            BigNumberish
        ]
    ]): string;
    encodeFunctionData(functionFragment: "deploymentTimestamp", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike
    ]): string;
    encodeFunctionData(functionFragment: "isTrustedPolicy", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "nodeModuleTemplate", values?: undefined): string;
    encodeFunctionData(functionFragment: "onTokenTransfer", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "operatorTemplate", values?: undefined): string;
    encodeFunctionData(functionFragment: "operators", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "predictAddress", values: [AddressLike, string]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "queueModuleTemplate", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeTrustedPolicy", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "stakeModuleTemplate", values?: undefined): string;
    encodeFunctionData(functionFragment: "stakedWei", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "streamrConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "tokenAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalStakedWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "trustedPolicies", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateTemplates", values: [AddressLike, AddressLike, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "voterCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "voterUpdate", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "voters", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "votersIndex", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addTrustedPolicies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addTrustedPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deploymentTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isTrustedPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nodeModuleTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onTokenTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "operatorTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "predictAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "queueModuleTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeTrustedPolicy", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakeModuleTemplate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakedWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "streamrConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalStakedWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedPolicies", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTemplates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voterCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voterUpdate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "votersIndex", data: BytesLike): Result;
}
export declare namespace AdminChangedEvent {
    type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
    type OutputTuple = [previousAdmin: string, newAdmin: string];
    interface OutputObject {
        previousAdmin: string;
        newAdmin: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace BeaconUpgradedEvent {
    type InputTuple = [beacon: AddressLike];
    type OutputTuple = [beacon: string];
    interface OutputObject {
        beacon: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace NewOperatorEvent {
    type InputTuple = [
        operatorAddress: AddressLike,
        operatorContractAddress: AddressLike
    ];
    type OutputTuple = [
        operatorAddress: string,
        operatorContractAddress: string
    ];
    interface OutputObject {
        operatorAddress: string;
        operatorContractAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace PolicyWhitelistedEvent {
    type InputTuple = [policyAddress: AddressLike, isWhitelisted: boolean];
    type OutputTuple = [policyAddress: string, isWhitelisted: boolean];
    interface OutputObject {
        policyAddress: string;
        isWhitelisted: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace TemplateAddressesEvent {
    type InputTuple = [
        operatorTemplate: AddressLike,
        nodeModuleTemplate: AddressLike,
        queueModuleTemplate: AddressLike,
        stakeModuleTemplate: AddressLike
    ];
    type OutputTuple = [
        operatorTemplate: string,
        nodeModuleTemplate: string,
        queueModuleTemplate: string,
        stakeModuleTemplate: string
    ];
    interface OutputObject {
        operatorTemplate: string;
        nodeModuleTemplate: string;
        queueModuleTemplate: string;
        stakeModuleTemplate: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpgradedEvent {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace VoterUpdateEvent {
    type InputTuple = [voterAddress: AddressLike, isVoter: boolean];
    type OutputTuple = [voterAddress: string, isVoter: boolean];
    interface OutputObject {
        voterAddress: string;
        isVoter: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface OperatorFactory extends BaseContract {
    connect(runner?: ContractRunner | null): OperatorFactory;
    waitForDeployment(): Promise<this>;
    interface: OperatorFactoryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    addTrustedPolicies: TypedContractMethod<[
        policyAddresses: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    addTrustedPolicy: TypedContractMethod<[
        policyAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    deployOperator: TypedContractMethod<[
        operatorsCutFraction: BigNumberish,
        operatorTokenName: string,
        operatorMetadataJson: string,
        policies: [AddressLike, AddressLike, AddressLike],
        policyParams: [BigNumberish, BigNumberish, BigNumberish]
    ], [
        string
    ], "nonpayable">;
    deploymentTimestamp: TypedContractMethod<[
        arg0: AddressLike
    ], [
        bigint
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialize: TypedContractMethod<[
        templateAddress: AddressLike,
        dataTokenAddress: AddressLike,
        streamrConfigAddress: AddressLike,
        nodeModuleAddress: AddressLike,
        queueModuleAddress: AddressLike,
        stakeModuleAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    isTrustedPolicy: TypedContractMethod<[
        policyAddress: AddressLike
    ], [
        boolean
    ], "view">;
    nodeModuleTemplate: TypedContractMethod<[], [string], "view">;
    onTokenTransfer: TypedContractMethod<[
        from: AddressLike,
        amount: BigNumberish,
        param: BytesLike
    ], [
        void
    ], "nonpayable">;
    operatorTemplate: TypedContractMethod<[], [string], "view">;
    operators: TypedContractMethod<[arg0: AddressLike], [string], "view">;
    predictAddress: TypedContractMethod<[
        deployer: AddressLike,
        operatorTokenName: string
    ], [
        string
    ], "view">;
    proxiableUUID: TypedContractMethod<[], [string], "view">;
    queueModuleTemplate: TypedContractMethod<[], [string], "view">;
    removeTrustedPolicy: TypedContractMethod<[
        policyAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    stakeModuleTemplate: TypedContractMethod<[], [string], "view">;
    stakedWei: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    streamrConfig: TypedContractMethod<[], [string], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    tokenAddress: TypedContractMethod<[], [string], "view">;
    totalStakedWei: TypedContractMethod<[], [bigint], "view">;
    trustedPolicies: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
    updateTemplates: TypedContractMethod<[
        templateAddress: AddressLike,
        nodeModuleAddress: AddressLike,
        queueModuleAddress: AddressLike,
        stakeModuleAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    upgradeTo: TypedContractMethod<[
        newImplementation: AddressLike
    ], [
        void
    ], "nonpayable">;
    upgradeToAndCall: TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    voterCount: TypedContractMethod<[], [bigint], "view">;
    voterUpdate: TypedContractMethod<[
        operatorContractAddress: AddressLike
    ], [
        boolean
    ], "nonpayable">;
    voters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    votersIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "addTrustedPolicies"): TypedContractMethod<[
        policyAddresses: AddressLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "addTrustedPolicy"): TypedContractMethod<[policyAddress: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "deployOperator"): TypedContractMethod<[
        operatorsCutFraction: BigNumberish,
        operatorTokenName: string,
        operatorMetadataJson: string,
        policies: [AddressLike, AddressLike, AddressLike],
        policyParams: [BigNumberish, BigNumberish, BigNumberish]
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "deploymentTimestamp"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        templateAddress: AddressLike,
        dataTokenAddress: AddressLike,
        streamrConfigAddress: AddressLike,
        nodeModuleAddress: AddressLike,
        queueModuleAddress: AddressLike,
        stakeModuleAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isTrustedPolicy"): TypedContractMethod<[policyAddress: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "nodeModuleTemplate"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "onTokenTransfer"): TypedContractMethod<[
        from: AddressLike,
        amount: BigNumberish,
        param: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "operatorTemplate"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "operators"): TypedContractMethod<[arg0: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "predictAddress"): TypedContractMethod<[
        deployer: AddressLike,
        operatorTokenName: string
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "queueModuleTemplate"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "removeTrustedPolicy"): TypedContractMethod<[policyAddress: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "stakeModuleTemplate"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "stakedWei"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "streamrConfig"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "tokenAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalStakedWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "trustedPolicies"): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "updateTemplates"): TypedContractMethod<[
        templateAddress: AddressLike,
        nodeModuleAddress: AddressLike,
        queueModuleAddress: AddressLike,
        stakeModuleAddress: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "upgradeTo"): TypedContractMethod<[
        newImplementation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "voterCount"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "voterUpdate"): TypedContractMethod<[
        operatorContractAddress: AddressLike
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "voters"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "votersIndex"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
    getEvent(key: "BeaconUpgraded"): TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "NewOperator"): TypedContractEvent<NewOperatorEvent.InputTuple, NewOperatorEvent.OutputTuple, NewOperatorEvent.OutputObject>;
    getEvent(key: "PolicyWhitelisted"): TypedContractEvent<PolicyWhitelistedEvent.InputTuple, PolicyWhitelistedEvent.OutputTuple, PolicyWhitelistedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "TemplateAddresses"): TypedContractEvent<TemplateAddressesEvent.InputTuple, TemplateAddressesEvent.OutputTuple, TemplateAddressesEvent.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    getEvent(key: "VoterUpdate"): TypedContractEvent<VoterUpdateEvent.InputTuple, VoterUpdateEvent.OutputTuple, VoterUpdateEvent.OutputObject>;
    filters: {
        "AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
        AdminChanged: TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
        "BeaconUpgraded(address)": TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
        BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "NewOperator(address,address)": TypedContractEvent<NewOperatorEvent.InputTuple, NewOperatorEvent.OutputTuple, NewOperatorEvent.OutputObject>;
        NewOperator: TypedContractEvent<NewOperatorEvent.InputTuple, NewOperatorEvent.OutputTuple, NewOperatorEvent.OutputObject>;
        "PolicyWhitelisted(address,bool)": TypedContractEvent<PolicyWhitelistedEvent.InputTuple, PolicyWhitelistedEvent.OutputTuple, PolicyWhitelistedEvent.OutputObject>;
        PolicyWhitelisted: TypedContractEvent<PolicyWhitelistedEvent.InputTuple, PolicyWhitelistedEvent.OutputTuple, PolicyWhitelistedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "TemplateAddresses(address,address,address,address)": TypedContractEvent<TemplateAddressesEvent.InputTuple, TemplateAddressesEvent.OutputTuple, TemplateAddressesEvent.OutputObject>;
        TemplateAddresses: TypedContractEvent<TemplateAddressesEvent.InputTuple, TemplateAddressesEvent.OutputTuple, TemplateAddressesEvent.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
        "VoterUpdate(address,bool)": TypedContractEvent<VoterUpdateEvent.InputTuple, VoterUpdateEvent.OutputTuple, VoterUpdateEvent.OutputObject>;
        VoterUpdate: TypedContractEvent<VoterUpdateEvent.InputTuple, VoterUpdateEvent.OutputTuple, VoterUpdateEvent.OutputObject>;
    };
}
