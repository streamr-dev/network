syntax = "proto3";
option optimize_for = CODE_SIZE;

package dht;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "packages/proto-rpc/protos/ProtoRpc.proto";

service DhtNodeRpc {
  // TODO rename to getClosestNeighbors (breaking change)
  rpc getClosestPeers (ClosestPeersRequest) returns (ClosestPeersResponse);
  // TODO rename to getClosestRingContacts (breaking change)
  rpc getClosestRingPeers (ClosestRingPeersRequest) returns (ClosestRingPeersResponse);
  rpc ping (PingRequest) returns (PingResponse);
  rpc leaveNotice (LeaveNotice) returns (google.protobuf.Empty);
}

service RouterRpc {
  rpc routeMessage (RouteMessageWrapper) returns (RouteMessageAck);
  rpc forwardMessage (RouteMessageWrapper) returns (RouteMessageAck);
}

service RecursiveOperationRpc {
  rpc routeRequest (RouteMessageWrapper) returns (RouteMessageAck);
}

service StoreRpc {
  rpc storeData (StoreDataRequest) returns (StoreDataResponse);
  rpc replicateData (ReplicateDataRequest) returns (google.protobuf.Empty);
}

service RecursiveOperationSessionRpc {
  rpc sendResponse(RecursiveOperationResponse) returns (google.protobuf.Empty);
}

service WebsocketClientConnectorRpc {
  rpc requestConnection (WebsocketConnectionRequest) returns (google.protobuf.Empty);
}

service WebrtcConnectorRpc {
  rpc requestConnection (WebrtcConnectionRequest) returns (google.protobuf.Empty);
  rpc rtcOffer (RtcOffer) returns (google.protobuf.Empty);
  rpc rtcAnswer (RtcAnswer) returns (google.protobuf.Empty);
  rpc iceCandidate (IceCandidate) returns (google.protobuf.Empty);
}

service ConnectionLockRpc {
  rpc lockRequest (LockRequest) returns (LockResponse);
  rpc unlockRequest (UnlockRequest) returns (google.protobuf.Empty);
  rpc gracefulDisconnect (DisconnectNotice) returns (google.protobuf.Empty);
  rpc setPrivate (SetPrivateRequest) returns (google.protobuf.Empty);
}

service ExternalApiRpc {
  rpc externalFetchData (ExternalFetchDataRequest) returns (ExternalFetchDataResponse);
  rpc externalStoreData (ExternalStoreDataRequest) returns (ExternalStoreDataResponse);
}

// Used inside RpcMessage

message StoreDataRequest {
  bytes key = 1;
  google.protobuf.Any data = 2;
  bytes creator = 3;
  google.protobuf.Timestamp createdAt = 4;
  uint32 ttl = 5;
}

message StoreDataResponse {
}

message ExternalStoreDataRequest {
  bytes key = 1;
  google.protobuf.Any data = 2;
}

message ExternalStoreDataResponse {
  repeated PeerDescriptor storers = 1;
}

message ReplicateDataRequest {
  DataEntry entry = 1;
}

message DataEntry {
  bytes key = 1;
  google.protobuf.Any data = 2;
  bytes creator = 3;
  google.protobuf.Timestamp createdAt = 4;
  google.protobuf.Timestamp storedAt = 5; 
  uint32 ttl = 6;   // milliseconds
  bool stale = 7;
  bool deleted = 8;
}

// TODO rename to ClosestNeighborsRequest
message ClosestPeersRequest {
  bytes nodeId = 1;
  string requestId = 2;
}

// TODO rename to ClosestNeighborsResponse
message ClosestPeersResponse {
  repeated PeerDescriptor peers = 1;
  string requestId = 2;
}

// TODO rename to ClosestRingContactsRequest
message ClosestRingPeersRequest {
  bytes ringId = 1;
  string requestId = 2;
}

// TODO rename to ClosestRingContactsResponse
message ClosestRingPeersResponse {
  repeated PeerDescriptor leftPeers = 1;
  repeated PeerDescriptor rightPeers = 2;
  string requestId = 3;
}

message RecursiveOperationRequest {
  string sessionId = 1;
  RecursiveOperation operation = 2;
}

enum RecursiveOperation {
  FIND_CLOSEST_NODES = 0;
  FETCH_DATA = 1;
  DELETE_DATA = 2;
}

message RecursiveOperationResponse {
  repeated PeerDescriptor closestConnectedNodes = 1;
  repeated DataEntry dataEntries = 2;
  bool noCloserNodesFound = 3;
  repeated PeerDescriptor routingPath = 4;
}

message PingRequest {
  string requestId = 1;
}

message PingResponse {
  string requestId = 1;
}

message LeaveNotice {
}

message PeerDescriptor {
  bytes nodeId = 1;
  NodeType type = 2;
  ConnectivityMethod udp = 3;
  ConnectivityMethod tcp = 4;
  ConnectivityMethod websocket = 5;
  optional uint32 region = 6;
  optional uint32 ipAddress = 7;
  optional bytes publicKey = 8;
  // signature of fields 2-8
  optional bytes signature = 9; 
}

message ConnectivityMethod {
  uint32 port = 1;
  string host = 2;
  bool tls = 3;
}

enum NodeType {
  NODEJS = 0;
  BROWSER = 1;
}

enum RpcResponseError {
  SERVER_TIMOUT = 0;
  CLIENT_TIMEOUT = 1;
  SERVER_ERROR = 2;
  UNKNOWN_RPC_METHOD = 3;
}

message RouteMessageWrapper {
  string requestId = 1;
  PeerDescriptor sourcePeer = 2;
  bytes target = 3;
  Message message = 4;
  repeated PeerDescriptor reachableThrough = 5;
  repeated PeerDescriptor routingPath = 6;
  repeated string parallelRootNodeIds = 7;
}

message RouteMessageAck {
  string requestId = 1;
  optional RouteMessageError error = 2;
}

enum RouteMessageError {
  NO_TARGETS = 0;
  DUPLICATE = 1;
  // TODO: can this be removed? If DhtNode is already stopped the server side requests
  // should not be processed
  STOPPED = 2;
}

message ConnectivityRequest {
  uint32 port = 1;
  bool tls = 2;
  optional string host = 3;
  bool allowSelfSignedCertificate = 4;
}

message ConnectivityResponse {
  string host = 1;
  string natType = 2;
  ConnectivityMethod websocket = 3;
  uint32 ipAddress = 4;
  string protocolVersion = 5;
  optional double latitude = 6;
  optional double longitude = 7;
}

message HandshakeRequest {
  PeerDescriptor sourcePeerDescriptor = 1;
  optional PeerDescriptor targetPeerDescriptor = 2;
  string protocolVersion = 3;
  string applicationVersion = 4;
}

message HandshakeResponse {
  PeerDescriptor sourcePeerDescriptor = 1;
  optional HandshakeError error = 2;
  string protocolVersion = 3;
  string applicationVersion = 4;
}

enum HandshakeError {
  DUPLICATE_CONNECTION = 0;
  INVALID_TARGET_PEER_DESCRIPTOR = 1;
  UNSUPPORTED_PROTOCOL_VERSION = 2;
}

// Wraps all messages

message Message {
  string messageId = 1;
  PeerDescriptor sourceDescriptor = 2;
  PeerDescriptor targetDescriptor = 3;
  string serviceId = 4; // id of the RPC service
  oneof body {
    protorpc.RpcMessage rpcMessage = 5;
    ConnectivityRequest connectivityRequest = 6;
    ConnectivityResponse connectivityResponse = 7;
    HandshakeRequest handshakeRequest = 8;
    HandshakeResponse handshakeResponse = 9;
    RecursiveOperationRequest recursiveOperationRequest = 10;
  };
}

// Connector Messages

// WebSocket
message WebsocketConnectionRequest {
}

// WebRTC
message WebrtcConnectionRequest {
}

message RtcOffer {
  string description = 1;
  string connectionId = 2;
}

message RtcAnswer {
  string description = 1;
  string connectionId = 2;
}

message IceCandidate {
  string candidate = 1;
  string mid = 2;
  string connectionId = 3;
}

message LockRequest {
  string lockId = 1;
}

message UnlockRequest {
  string lockId = 1;
}

message LockResponse {
  bool accepted = 1;
}

enum DisconnectMode {
  NORMAL = 0;
  LEAVING = 1;
}

message DisconnectNotice {
  DisconnectMode disconnectMode = 1;
}

message SetPrivateRequest {
  bool isPrivate = 1;
}

message ExternalFetchDataRequest {
  bytes key = 1;
}

message ExternalFetchDataResponse {
  repeated DataEntry entries = 1;
}
